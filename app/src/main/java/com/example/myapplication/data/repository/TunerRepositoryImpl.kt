package com.example.myapplication.data.repository

import com.example.myapplication.data.audio.AudioRecorder
import com.example.myapplication.data.audio.PitchDetector
import com.example.myapplication.domain.model.*
import com.example.myapplication.domain.repository.TunerRepository
import kotlin.math.abs
import kotlin.math.log2

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ç—é–Ω–µ—Ä–∞
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –Ω–æ—Ç—ã
class TunerRepositoryImpl(
    private val recorder: AudioRecorder,      // –û–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
    private val sampleRate: Int = 44100       // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
) : TunerRepository {

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –∑–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.
     * @return TuningResult - –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–æ—Ç–µ, –±–ª–∏–∂–∞–π—à–µ–π –Ω–æ—Ç–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤ —Ü–µ–Ω—Ç–∞—Ö.
     */
    override suspend fun analyze(): TuningResult {
        // üîπ –°–Ω–∏–º–∞–µ–º –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ AudioRecorder
        val buffer = recorder.captureAudio()

        // üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É —Å –ø–æ–º–æ—â—å—é PitchDetector
        val freq = PitchDetector.detectFrequency(buffer, sampleRate)

        // üîπ –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (—à—É–º –∏–ª–∏ —Ç–∏—à–∏–Ω–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ø—É—Å—Ç–æ–π" —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (freq == 0.0) {
            return TuningResult(null, 0.0, false, 0.0)
        }

        // üîπ –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —ç—Ç–∞–ª–æ–Ω–Ω—É—é –Ω–æ—Ç—É —Å—Ä–µ–¥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏—Ç–∞—Ä—ã
        // standardGuitarTuning ‚Äî —Å–ø–∏—Å–æ–∫ Note(name: String, frequency: Double)
        val closest = standardGuitarTuning.minByOrNull { abs(it.frequency - freq) }
            ?: return TuningResult(null, 0.0, false, freq) // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç

        // üîπ –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç–∞—Ö
        // –§–æ—Ä–º—É–ª–∞: cents = 1200 * log2(freq / —ç—Ç–∞–ª–æ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞)
        val centsDiff = 1200 * log2(freq / closest.frequency)

        // üîπ –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Ç—Ä—É–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–µ ¬±5 —Ü–µ–Ω—Ç–æ–≤
        val isInTune = abs(centsDiff) < 5

        // üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç TuningResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        return TuningResult(
            closest,     // –ë–ª–∏–∂–∞–π—à–∞—è —ç—Ç–∞–ª–æ–Ω–Ω–∞—è –Ω–æ—Ç–∞
            centsDiff,   // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç–∞—Ö
            isInTune,    // –°—Ç—Ä—É–Ω–∞ –≤ —Å—Ç—Ä–æ—é?
            freq         // –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
        )
    }
}
